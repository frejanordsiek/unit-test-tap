\input texinfo
@c -*-texinfo-*-
@c %**start of header
@include version.texi
@setfilename unit-test-tap.info
@documentencoding UTF-8
@settitle unit-test-tap Reference Manual @value{VERSION}
@syncodeindex pg cp
@c %**end of header

@copying
This manual documents unit-test-tap version @value{VERSION}

Copyright @copyright{} 2016 Freja Nordsiek.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying


@dircategory The Algorithmic Language Scheme
@direntry
* unit-test-tap: (unit-test-tap).     Scheme unit-test-tap module/library manual.
@end direntry



@titlepage
@title unit-test-tap Reference Manual
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Freja Nordsiek

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage




@c Macros to make it easier to do enter procedures and macros.

@c Anchor and index for one def
@macro scmanchorindex {name}
@c@findex \name\
@anchor{\name\}
@end macro




@contents

@ifnottex
@node TOP
@top unit-test-tap Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Using The Library::
* API::

Appendices

* GNU Free Documentation License:: The license of this manual.

Indices

* Index::
* API Index::

@end menu


@node Introduction
@chapter Introduction
@cindex Introduction

unit-test-tap is a Scheme library for unit testing that writes test
results using @acronym{TAP, Test Anything Protocol} version 13 done in
the spirit of
@uref{http://srfi.schemers.org/srfi-64/srfi-64.html, SRFI-64}.
@uref{http://schemers.org, Scheme} is a dialect of lisp known for having
a very large number of different implementations and a small language
definition compared to other programming languages,
though @acronym{R@sup{6}RS, Revised@sup{6} Reports on Scheme} does
venture into the medium size territory.

The library targets the two most recent Scheme standards as of October
2016, R@sup{6}RS and R@sup{7}RS-small.

A specific version is also provided for the
@uref{https://www.gnu.org/software/guile/, Guile} implementation
starting with version 2.0.
@acronym{Guile, GNUâ€™s Ubiquitous Intelligent Language for Extensions} is
a popular Scheme implementation for extending programs and libraries
(especially those from GNU), is the language that
@uref{https://www.gnu.org/software/guix/,Guix} package manager uses
which is in turn used for the
@uref{https://www.gnu.org/software/guix/,GuixSD} GNU/Linux distribution,
and is also seeing a growing number of standalone programs.

The package provides unit tests for this library for Guile (both Guile
and R@sup{6}RS versions) and @uref{http://call-cc.org/, Chicken}
(R@sup{7}RS version with the help of the @code{r7rs} extension).

@menu
* License::
* Installation::
* Portability::
* Test Result Definitions::
* SRFI-64::
* TAP - Test Anything Protocol::
@end menu

@node License
@section License

unit-tap-test is copyrighted and licensed under the
@acronym{LGPL 2.1+, Lesser General Public License version 2.1 or
later}. The full license is reproduced in the file @file{COPYING}, and
can also be read online at
@url{https://www.gnu.org/licenses/old-licenses/lgpl-2.1}.

This manual is copyrighted and licensed under the
@acronym{GFDL 1.3+, GNU Free Documentation License 1.3 or later}
(@pxref{GNU Free Documentation License}).

@node Installation
@section Installation

The R@sup{6}RS and R@sup{7}RS-small versions have to be built from the
Guile specific version. After being built, they are found at
@file{src/r6rs/unit-test-tap.scm} and
@file{src/r7rs/unit-test-tap.scm}.

The Guile version of the library is entirely contained in
@file{src/unit-tap-test.scm}. It is possible to just copy the file to
where ever it is needed; such as into Guile's site directory, which can
be found by running @code{(%site-dir)} at the REPL. On GNU/Linux, it
will usually be something like @file{/usr/share/guile/site/X.Y} where
@code{X.Y} is the effective version of Guile. Though, using the provided
@file{configure} script and @command{make} will allow this to be done in
a more automated fashion as well as compile to Guile's bytecode
format (go files).

A @file{configure} script is provided that will produce a
@file{Makefile} that can be used to build the R@sup{6}RS and
R@sup{7}RS-small versions of the library, compile the library to Guile's
bytecode format (go files), install the library into Guile's site
directories for Scheme files and go files, build the documentation, and
run unit tests on the library in both Guile and Chicken. The package is
configured using the @file{configure} script, which takes user input to
tune the build, finds and checks Guile (where Guile wants Scheme and go
files to be installed and that the required libraries are available),
and finds and checks Chicken for use in testing (default is yes). Inside
the package directory, run

@example
./configure [--prefix=DIR] [--enable-compile-scm=yes/no] [--with-guile=X.Y]
    [--enable-test-chicken=yes/no]
@end example

where optional parameters can be used to set the base directory (prefix)
for installing the documentation, whether to compile to Guile's bytecode
format (default is yes), which Guile effective version to target and
look for (default is 2.2, followed by 2.0 if 2.2 cannot be found), and
whether to do unit tests using Chicken in addition to Guile.

Now that the @file{Makefile} has been made, one runs

@example
make
@end example

to build the documentation in info format and compile the library to
Guile's bytecode depending on whether that was enabled or
not. The library can be checked by running unit tests on it (using Guile
and optionally Chicken) by running

@example
make check
@end example

Everything can be installed by running

@example
make install
@end example

HTML documentation can be built using @code{make html} and installed by
@code{make install-html}.

If you grab unit-test-tap from its source code repository,
@file{configure} will not be present yet. You need
@uref{https://www.gnu.org/software/autoconf/autoconf.html,Autoconf} and
@uref{https://www.gnu.org/software/automake,Automake} in order to
generate them. They are generated by running the command
@code{autoreconf}.

@node Portability
@section Portability

unit-tap-test is provided for Scheme standards
@uref{http://www.r6rs.org, R@sup{6}RS} and
@uref{http://trac.sacrideo.us/wg/wiki/R7RSHomePage, R@sup{7}RS-small},
and for the Guile implementation specifically (Guile version uses a few
extenstions). The Guile version is not portable to other
implementations, while the R@sup{6}RS and R@sup{7}RS-small versions are
portable to implementations that implement those standards.

There is one major catch, though. unit-test-tap uses R@sup{6}RS and
R@sup{7}RS-small exception handling, which may not handle all exception
types in every Scheme implementation and/or may handle them
suboptimally. It may be impossible to test for a specific error type for
exceptions not thrown with @code{raise} from R@sup{6}RS and
R@sup{7}RS-small.

@node Test Result Definitions
@section Test Result Definitions

There are five different results a particular test/assertion can
have. They are defined below.

@itemize @bullet
@item @dfn{Pass (PASS)} --- The test/expressions evaluated correctly as
it should.
@item @dfn{Fail (FAIL)} --- The test/expressions did not evaluate
correctly when they should have.
@item @dfn{Expected Fail (XFAIL)} --- The test/expressions did not evaluate
correctly but this was expected before hand (e.g. it is on the TODO list
to fix this).
@item @dfn{Unexpected Pass (XPASS)} --- The test/expressions evaluated
correctly but it/they were expected to fail.
@item @dfn{Skipped (SKIP)} --- The test was skipped.
@end itemize

@node SRFI-64
@section SRFI-64

@uref{http://srfi.schemers.org/srfi-64/srfi-64.html, SRFI-64} is a
Scheme extension for unit testing that is widely implemented by Scheme
implementations. It uses an imperative style to performing tests, where
named test suites/groups are entered and left and assertions done
explicitly, each as separate procedure and macro calls. The simplest
assert in SRFI-64 is

@lisp
(test-assert [TEST-NAME] EXPRESSION)
@end lisp

where @var{TEST-NAME} is the name of the particular test/assertion being
done (optional) and @var{EXPRESSION} is the expression or value to
evaluate and check to see if it is logically true (anything other than
@code{#f}).

There are additional asserts for different kinds of equality
(@code{test-eq}, @code{test-eqv}, and @code{test-equal}), approximate
numericaly equality (@code{test-approximate}), and whether an
expressiont throws an exception (@code{test-error}).

SRFI-64 also provides procedures to skip the next @var{N} tests and to
mark the next test as being expected to fail.

SRFI-64 is pretty comprehensive and even provides the ability to make
one's own runners which can customize the output. However, SRFI-64 with
a custom runner is a bit suboptimal for writing test results in TAP
format. Additionally, marking tests to skip or being expected to fail
would be more conveniently implemented using keyword arguments in the
test asserts themselves. These were the motivations for writing the
unit-test-tap module/library.


@node TAP - Test Anything Protocol
@section TAP - Test Anything Protocol

The TAP protocol, specified at @url{http://testanything.org}, is a
protocol for the output of unit tests that was originally designed for
Perl but has been taken up by projects in other languages. There is also
built in support for using TAP for unit test output in
@uref{https://www.gnu.org/software/automake,Automake}.

unit-test-tap uses
@uref{http://testanything.org/tap-version-13-specification.html,version 13}
of TAP.

The protocol consists of a header before the first test that declares
the TAP format version and how many tests @var{N} to expect to be
reported.

@example
TAP version 13
1..N
@end example

And then, at least one line of output is written for each test. The
first, and possibly only, line for the @var{n}'th test declares the test
result.

@example
ok n DESCRIPTION # DIRECTIVE
@end example

if the test produced the correct results (PASS, XPASS, or SKIP) or

@example
not ok n DESCRIPTION # DIRECTIVE
@end example

if the test did not produce the correct results (FAIL or XFAIL).

@var{DESCRIPTION} is an arbitrary string without newlines describing or
naming what test was done. @code{# DIRECTIVE} is only included if the
test result was XFAIL, XPASS, or SKIP. @var{DIRECTIVE} is
@code{SKIP} for the SKIP result and @code{TODO} for XFAIL and XPASS. An
arbitrary string without newlines can optionally follow the directive.

Then, optionally after the line declaring the result of the test, one or
more diagnostic lines can be written that describe the result, the
inputs, etc. Typically, some sort of failure message is given along with
how the test failed (or was expected to) for FAIL, XFAIL, and XPASS
results. The diagnostic block is an inline YAML document that starts
with the line @code{  ---} and terminates with the line @code{  ...},
with each diagnostic line in the YAML block itsefl having a minimum
indentation of two space characters.

An example output for a FAIL test (test number 3) from checking that
@code{(+ a 2)} is zero when @var{a} is 8 would be

@example
not ok 3 - result is zero
  ---
  message: Numbers not =
  got:
    expr0: 0
    expr1: (+ a 2)
  evaluated:
    arg0: 0
    arg1: 10
  ...
@end example


@node Using The Library
@chapter Using The Library
@cindex Using The Library

An overview of how to use the unit-test-tap library/module is given
here. A full listing of all the procedures and macros that are in the
unit-test-tap library will be given later (@pxref{API}). If you are
familiar with SRFI-64, then the API of unit-test-tap will feel very
familiar with many procedures/macros having the same name and similar
arguments.

@strong{Note that Scheme symbols are used for key names when using
keyword arguments in this library.}

@menu
* Starting Up::
* Doing Tests::
* Using Groups::
* Finishing Up::
@end menu

@node Starting Up
@section Starting Up

unit-tap-test is imported for use by

@lisp
(import ((unit-test-tap)))
@end lisp

The test suite needs to be initialized before it is used. This is done
with @code{test-begin}, which needs to be given the total number of tests
that are expected to be done @var{N} and optionally the port to write
test output to (default is standard output) and the prefix to use for
the diagnostic YAML blocks (default is nothing).

@lisp
(test-begin N ['port PORT] ['yaml-prefix PREFIX])
@end lisp

where the square brackets denote optional parts (the brackets should be
left out if the particular keyword argument is used). The YAML prefix is
provided for the case when the test harness expects TAP output older
than version 13, in which case @var{PREFIX} should start with the
@code{"#"} character. Note the use of symbols to give keyword arguments.

@node Doing Tests
@section Doing Tests

The simplest test just checks that a single argument, @var{EXPR},
evaluates to non @code{#f} (logically true), which is

@lisp
(test-assert EXPR [NAME] ['skip SKIP] ['xfail XFAIL])
@end lisp

where the test name, whether to skip the test (default is not to skip),
and whether the test is expected to fail (default is that it is not
expected to fail) are optional arguments. All tests in the unit-test-tap
library/module support these three optional arguments. One difference
from SRFI-64 is that the optional @var{NAME} argument goes after
@var{EXPR} instead of before it. The rearrangement was required to
support the keyword arguments while having a consistent interface to all
tests in the library/module (one of the test takes a variable number of
arguments).

All tests will catch exceptions thrown when evaluating their arguments,
which in the case of @code{test-assert} is in evaluating @var{EXPR}.

An example of a PASS test would be

@lisp
(test-assert #t "always passes")
@end lisp

and one that fails

@lisp
(test-assert #f "always fails")
@end lisp

or

@lisp
(test-assert (= 3 "4") "always fails due to an exception")
@end lisp

and a test to be skipped

@lisp
(test-assert (+ 3 2) "always skipped" 'skip #t)
@end lisp

and an XFAIL test

@lisp
(test-assert #f "expected fails" 'xfail #t)
@end lisp

and an XPASS test

@lisp
(test-assert #t "expected fail but passes anyways" 'xfail #t)
@end lisp

Two objects or expressions @var{EXPR0} and @var{EXPR1} can be compared
for various definitions of equality (@code{eq?}, @code{eqv?}, and
@code{equal?}) by

@lisp
(test-eq EXPR0 EXPR1 [NAME] ['skip SKIP] ['xfail XFAIL])
(test-eqv EXPR0 EXPR1 [NAME] ['skip SKIP] ['xfail XFAIL])
(test-equal EXPR0 EXPR1 [NAME] ['skip SKIP] ['xfail XFAIL])
@end lisp

Two numbers, or expressions that evaluate to numbers, @var{EXPR0} and
@var{EXPR1} can be compared to see if they are equal to within a given
numerical accuracy @var{TOLERANCE}

@lisp
(test-approximate EXPR0 EXPR1 TOLERANCE [NAME] ['skip SKIP] ['xfail XFAIL])
@end lisp

All five of the previously described test macros have counterparts with
the same name in SRFI-64. They are all actually implemented through
another more general test macro, that does not appear in SRFI-64, which
is @code{test-pred} and is used as follows

@lisp
(test-pred (PRED . ARGS) [NAME] ['skip SKIP] ['xfail XFAIL])
@end lisp

where the test evaluates the expression

@lisp
(PRED . ARGS)
@end lisp

and checks whether the result is non @code{#f}. @var{PRED} is a
procedure that takes the arguments @var{ARGS}. This test supports
@var{PRED}s that take any number of arguments, including none
(thunks). Note that the wrapping of @var{PRED} and @var{ARGS} in a list
within the call is required (@code{test-pred} is a macro, not a
procedure, and expects this syntax).

As an example, @code{test-eq} described previously could be implemented
as

@lisp
(test-pred (eq? EXPR0 EXPR1) [NAME] ['skip SKIP] ['xfail XFAIL])
@end lisp

The last test, which also has an SRFI-64 counterpart, is
@code{test-error} which checks whether an expression @var{EXPR} raises
an error, specifically of type @var{ERROR-TYPE}, and is used as follows

@lisp
(test-error ERROR-TYPE EXPR [NAME] ['skip SKIP] ['xfail XFAIL])
@end lisp

If the wrong type of error/exception is thrown (doesn't match
@var{ERROR-TYPE}), the test counts as FAIL (or XFAIL if expected to
fail). An @var{ERROR-TYPE} of @code{#t} means that any type of
error/exception counts as the right kind.

@node Using Groups
@section Using Groups

This library supports grouping testins under a named test groups that
count as a single test (all tests within them PASS, FAIL, etc. together)
as far as output is concerned. Nested groups are not supported at this
time.

A named group, @var{NAME}, is started as

@lisp
(test-group-begin NAME)
@end lisp

and then ended/exited as

@lisp
(test-group-end)
@end lisp

Tests in the group result in no output till the first result of FAIL or
XPASS, which then is output and all further tests in the group are
skipped. If all tests in the group were PASS, XFAIL, and/or SKIP when
the group is ended/exited, the group is considered to be PASS and a PASS
output result is written.

It is also possible to begin a group that has some number of tests and
an expression @var{CLEANUP-FORM} that should be run to clean up
resources at the end, even if an exception occurred. The test group is
automatically ended. This is done with the macro

@lisp
(test-group-with-cleanup NAME EXPR CLEANUP-FORM)
@end lisp

where @var{EXPR} could be a single expression (say, a single test) or
could be a @code{begin} block with more than one expression. This macro
is the exact counterpart to the SRFI-64 one with the same name.

@node Finishing Up
@section Finishing Up

When testing is complete and all clean up code has
been run, @code{test-end} can be used to exit Guile with an exit status
indicating the success (exit code 0) or failure (exit code 1) of the
tests as a whole. The tests as whole are considered to have succeeded if
all the test results were PASS, XFAIL, and/or SKIP and the number of
tests performed is equal to the number given to @code{test-begin}. If
there were any tests whose result was FAIL or XPASS, the tests as a
whole are considered to have failed. Finishing up this way is optional,
but it is useful for some test harnesses (e.g. Automake's) to have an
exit status that reflects the status of the testing as a whole.

@lisp
(test-end)
@end lisp


@node API
@chapter API
@cindex API

The library's exported procedures and macros are grouped by their
functionality.

@menu
* Initialization and Finishing::
* Test Suite Parameters::
* Counters::
* Groups::
* Tests::
@end menu

@node Initialization and Finishing
@section Initialization and Finishing

@scmanchorindex{test-begin}
@deffn {Scheme Procedure} test-begin N ['port P] ['yaml-prefix PREFIX]
Starts the unit testing framework/suite that is expected to have @var{N}
tests in total. All counters are reset and the TAP header is written to
output. The test writes its output to @code{(current-output-port)}, or
@var{PORT} if it is given (it is expected to be an already opened output
port). The YAML lines in the diagnostic messages for FAIL, XFAIL, and
XPASS tests are prefixed with @var{PREFIX} if it is given. End testing
with @ref{test-end}.
@end deffn

@scmanchorindex{test-end}
@deffn {Scheme Procedure} test-end
Exits Guile with an exit code set to whether the expected number of
tests were run and their results were all PASS, XFAIL, and/or SKIP (exit
code of 0) or not (exit code of 1).
@end deffn

@node Test Suite Parameters
@section Test Suite Parameters

The test suite parameters can be read, after testing has started, by the
following procedures.

@scmanchorindex{test-port}
@deffn {Scheme Procedure} test-port
Return the port that the test output is written to.
@end deffn

@scmanchorindex{test-yaml-prefix}
@deffn {Scheme Procedure} test-yaml-prefix
Return the string prefix for the yaml diagnostic block lines written
after FAIL, XFAIL, and XPASS tests.
@end deffn

@scmanchorindex{test-group-name}
@deffn {Scheme Procedure} test-group-name
Return the name (string) of the currently entered group (@code{""} if
none).
@end deffn

@scmanchorindex{test-group-failed}
@deffn {Scheme Procedure} test-group-failed
Return whether the currently entered group has failed (one FAIL or XPASS
test inside it) as a boolean.
@end deffn

@scmanchorindex{test-number}
@deffn {Scheme Procedure} test-number
Return the total number (integer) of tests that are set to be done,  as
set by the procedure @ref{test-begin}.
@end deffn

@node Counters
@section Counters

The number of tests done and their results are all kept track of in
counters, which can be read by the following procedures.

@scmanchorindex{test-count}
@deffn {Scheme Procedure} test-count
Return the 1 based index (integer) of the current test to be done.
@end deffn

@scmanchorindex{test-number-passed}
@scmanchorindex{test-number-failed}
@scmanchorindex{test-number-xfailed}
@scmanchorindex{test-number-xpassed}
@scmanchorindex{test-number-skipped}
@deffn {Scheme Procedure} test-number-passed
@deffnx {Scheme Procedure} test-number-failed
@deffnx {Scheme Procedure} test-number-xfailed
@deffnx {Scheme Procedure} test-number-xpassed
@deffnx {Scheme Procedure} test-number-skipped
Return the total number (integer) of tests that have passed, failed,
xfailed, xpassed, or skipped so far respectively.
@end deffn

@node Groups
@section Groups

@scmanchorindex{test-group-begin}
@deffn {Scheme Procedure} test-group-begin NAME
Begins a test group with the given @var{NAME}. An error is thrown if
@var{NAME} is not a string or group has already been begun. All tests
within a group pass or fail together as if they were a single test. End
the group with @ref{test-group-end}.
@end deffn

@scmanchorindex{test-group-end}
@deffn {Scheme Procedure} test-group-end
Ends the current test group. If all tests in it passed, the group is
considered to be a PASS.
@end deffn

@scmanchorindex{test-group-with-cleanup}
@deffn {Scheme Procedure} test-group-with-cleanup NAME EXPR CLEANUP-FORM
Enters the group @var{NAME}, runs expression @var{EXPR}, and then ends
the group and executes @var{CLEANUP-FORM} regardless of whether an
exception occured or not in beginning the group or running @var{EXPR}.
@end deffn

@node Tests
@section Tests

@scmanchorindex{test-pred}
@deffn {Scheme Procedure} test-pred (PRED . ARGS) [NAME] ['skip SKIP] ['xfail XFAIL]
Asserts that the evaluation of @code{(PRED . ARGS)} is non
@code{#f}. The test takes an optional @var{NAME}. Indicate whether the
test should be skipped or is expected to fail with the keyword arguments
@code{'skip} and @code{'xfail} set to non @code{#f} (the default is
@code{#f}). Predicates that take any number of arguments, including
zero, are supported. An example test to see if the result of two
mathematical expressions are equal but that one expects it to fail would
be

@lisp
(test-pred (= (* 2 3) (* 2 4)) "example" 'xfail #t)
@end lisp
@end deffn

@scmanchorindex{test-assert}
@deffn {Scheme Macro} test-assert EXPR [NAME] ['skip SKIP] ['xfail XFAIL]
Asserts that @var{EXPR} evaluates to non @code{#f}. The test takes an
optional @var{NAME}. Indicate whether the test should be skipped or
is expected to fail with the keyword arguments @code{'skip} and
@code{'xfail} set to non @code{#f} (the default is @code{#f}).
@end deffn

@scmanchorindex{test-eq}
@deffn {Scheme Macro} test-eq EXPR0 EXPR1 [NAME] ['skip SKIP] ['xfail XFAIL]
@deffnx {Scheme Macro} test-eqv EXPR0 EXPR1 [NAME] ['skip SKIP] ['xfail XFAIL]
@deffnx {Scheme Macro} test-equal EXPR0 EXPR1 [NAME] ['skip SKIP] ['xfail XFAIL]
Asserts @code{(pred EXPR0 EXPR1)} for @code{pred} being @code{eq?},
@code{eqv?}, and @code{equal?} respectively. The test takes an optional
@var{NAME}. Indicate whether the test should be skipped or is expected
to fail with the keyword arguments @code{'skip} and @code{'xfail} set
to non @code{#f} (the default is @code{#f}).
@end deffn

@scmanchorindex{test-approximate}
@deffn {Scheme Macro} test-approximate EXPR0 EXPR1 TOLERANCE [NAME] ['skip SKIP] ['xfail XFAIL]
Asserts that the absolute value of the numerical difference between
@var{EXPR0} and @var{EXPR1} is less than or equal to
@var{TOLERANCE}. The test takes an optional @var{NAME}. Indicate whether
the test should be skipped or is expected to fail with the keyword
arguments @code{'skip} and @code{'xfail} set to non @code{#f} (the
default is @code{#f}).
@end deffn

@scmanchorindex{test-error}
@deffn {Scheme Macro} test-error ERROR-TYPE EXPR [NAME] ['skip SKIP] ['xfail XFAIL]
Asserts that evaluating @var{EXPR} throws an exception of type
@var{ERROR-TYPE} (set to @code{#t} to indicate any exception
type). Throwing no exception or an exception of a different type is
considered a failure. The test takes an optional @var{NAME}. Indicate
whether the test should be skipped or is expected to fail with the
keyword arguments @code{'skip} and @code{'xfail} set to non @code{#f}
(the default is @code{#f}).
@end deffn


@node GNU Free Documentation License
@appendix GNU Free Documentation License
@cindex GNU FDL

@include fdl-1.3.texi

@node Index
@unnumbered Index
@printindex cp

@node API Index
@unnumbered API Index
@printindex fn

@bye
