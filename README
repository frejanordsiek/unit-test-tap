unit-test-tap 0.1
Copyright (C) 2016 Freja Nordsiek
License: LGPL 2.1 or later (see COPYING)

A TAP output based unit testing framework that is in the spirit of
SRFI-64 (http://srfi.schemers.org/srfi-64/srfi-64.html).

The interface is similar and many procedures have the same names.
However, skip and expected fail functionality are included into
the tests themselves as keyword arguments instead of as separate
procedures/macros. Additionally, the test-name argument has been
moved to the end instead of being the first argument of each
test macro, so as to better work with Guile's optional and
keyword argument facilities. Another major difference is that
test-begin's cannot be nested, though test-group-begin does
add one level of nesting where all the tests within a group count
as a single test for TAP output purposes (first one to FAIL or
XPASS fails the whole group).

This module is not portable outside of Guile at this time. It
uses Guile specific exception handling code, uses
Guile specific optional and keyword argument handling lambda*,
and uses Guile specific module/library declaration.


INSTALL Instructions ===================================================

Generic instructions for configuring, compiling, and installing this
library are in the INSTALL file. Specific instructions are detailed
here.

This library is for Guile >= 2.0, and therefore requires it to be
present. Additionally, pkg-config is required for locating the right
version of Guile and getting its configuration information.

The library is entirely contained in src/unit-tap-test.scm. It is
possible to just copy the file to where ever it is needed; such as into
Guile’s site directory, which can be found by running (%site-dir) at the
REPL. On GNU/Linux, it will usually be something like
/usr/share/guile/site/X.Y where X.Y is the effective version of Guile.

However, a configure script is provided that will produce a Makefile
that can be used to compile the library to Guile’s bytecode format (go
files), install the library into Guile’s site directories for Scheme
files and go files, build the documentation, and run unit tests on the
library. The package is configured using the configure script, which
takes user input to tune the build, finds Guile and where Guile wants
Scheme and go files to be installed, and checks that the required Scheme
libraries/modules are available. Inside the package directory, run

    ./configure [--prefix=DIR] [--enable-compile-scm=yes/no] \
        [--with-guile=X.Y]

where optional parameters can be used to set the base directory (prefix)
for installing the documentation, whether to compile to Guile’s bytecode
format (default is yes), and which Guile effective version to target and
look for (default is 2.2, followed by 2.0 if 2.2 cannot be found).

Now that the Makefile has been made, one runs

    make

to build the documentation in info format and compile the library to
Guile’s bytecode depending on whether that was enabled or not. The
library can be checked by running unit tests on it by running

    make check

Everything can be installed by running

    make install

HTML documentation can be built using make html and installed by

    make install-html

If you grab unit-test-tap from its source code repository, configure and
Makefile will not be present yet. You need Autoconf and Automake in
order to generate them. They are generated by running the command

    autoreconf

